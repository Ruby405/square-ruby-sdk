# square
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Square
  # OrdersApi
  class OrdersApi < BaseApi
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Creates an [Order](#type-order) that can then be referenced as `order_id`
    # in a
    # request to the [Charge](#endpoint-charge) endpoint. Orders specify
    # products for
    # purchase, along with discounts, taxes, and other settings to apply to the
    # purchase.
    # To associate a created order with a request to the Charge endpoint,
    # provide the
    # order's `id` in the `order_id` field of your request.
    # You cannot modify an order after you create it. If you need to modify an
    # order,
    # instead create a new order with modified details.
    # To learn more about the Orders API, see the
    # [Orders API Overview](/products/orders/overview).
    # @param [String] location_id Required parameter: The ID of the business
    # location to associate the order with.
    # @param [CreateOrderRequest] body Required parameter: An object containing
    # the fields to POST for the request.  See the corresponding object
    # definition for field details.
    # @return [CreateOrderResponse Hash] response from the API call
    def create_order(location_id:,
                     body:)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v2/locations/{location_id}/orders'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'location_id' => location_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      _errors = APIHelper.map_response(decoded, ['errors'])
      ApiResponse.new(_response, data: decoded, errors: _errors)
    end

    # Retrieves a set of [Order](#type-order)s by their IDs.
    # If a given Order ID does not exist, the ID is ignored instead of
    # generating an error.
    # @param [String] location_id Required parameter: The ID of the orders'
    # associated location.
    # @param [BatchRetrieveOrdersRequest] body Required parameter: An object
    # containing the fields to POST for the request.  See the corresponding
    # object definition for field details.
    # @return [BatchRetrieveOrdersResponse Hash] response from the API call
    def batch_retrieve_orders(location_id:,
                              body:)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v2/locations/{location_id}/orders/batch-retrieve'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'location_id' => location_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      _errors = APIHelper.map_response(decoded, ['errors'])
      ApiResponse.new(_response, data: decoded, errors: _errors)
    end

    # Search all Orders for a merchant and return either [Orders](#type-order)
    # or
    # [OrderEntries](#type-orderentry).
    # Note that details for orders processed with Square Point of Sale while in
    # offline mode may not be
    # transmitted to Square for up to 72 hours. Offline orders have a
    # `created_at` value that reflects
    # the time the order was originally processed, not the time it was
    # subsequently transmitted to
    # Square. Consequently, the SearchOrder endpoint might list an offline Order
    # chronologically
    # between online Orders that were seen in a previous request.
    # When fetching additional pages using a `cursor`, the `query` must be equal
    # to the `query` used to fetch the first page of results.
    # @param [SearchOrdersRequest] body Required parameter: An object containing
    # the fields to POST for the request.  See the corresponding object
    # definition for field details.
    # @return [SearchOrdersResponse Hash] response from the API call
    def search_orders(body:)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v2/orders/search'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      _errors = APIHelper.map_response(decoded, ['errors'])
      ApiResponse.new(_response, data: decoded, errors: _errors)
    end
  end
end
